digraph TuringMachine {
  rankdir=LR;
  node [shape=circle];

  // --- Example of the format ---
  //   90 -> 90 [label="# / B, R"];
  // means: In state 90, on reading '#', write 'B', move Right, go to state 90.

  // States 90..92
  90 -> 90 [label="# / B,R"];
  90 -> 91 [label="$ / B,L"];
  90 -> 90 [label="* / *,R"];
  
  91 -> 92 [label="B / B,L"];
  91 -> 91 [label="* / *,L"];

  92 -> 2  [label="B / B,L"];
  92 -> 92 [label="* / *,L"];

  // Setup tally: 0..3
  2  -> 3  [label="B / 0,R"];
  3  -> 10 [label="B / B,R"];

  // Find end of num1: 10..11
  10 -> 11 [label="B / B,L"];
  10 -> 11 [label="# / #,L"];
  10 -> 10 [label="0 / 0,R"];
  10 -> 10 [label="1 / 1,R"];

  11 -> 20 [label="0 / #,R"];
  11 -> 30 [label="1 / #,R"];

  // Multiply num2 by 2: 20..26
  20 -> 20 [label="B / B,R"];
  20 -> 20 [label="# / #,R"];
  20 -> 21 [label="* / *,R"];

  21 -> 25 [label="B / 0,L"];
  21 -> 21 [label="* / *,R"];

  25 -> 26 [label="B / B,L"];
  25 -> 25 [label="* / *,L"];

  26 -> 80 [label="B / B,R"];   // "Finished multiplying, clean up"
  26 -> 26 [label="# / #,L"];
  26 -> 11 [label="0 / 0,stay"];
  26 -> 11 [label="1 / 1,stay"];

  // Add num2 to tally: 30..32
  30 -> 30 [label="B / B,R"];
  30 -> 30 [label="# / #,R"];
  30 -> 31 [label="* / *,R"];

  31 -> 32 [label="B / B,L"];
  31 -> 31 [label="* / *,R"];

  32 -> 40 [label="0 / y,L"];
  32 -> 50 [label="1 / x,L"];
  32 -> 32 [label="y / y,L"];
  32 -> 32 [label="x / x,L"];
  32 -> 70 [label="B / B,R"];   // "Finished adding"

  // Adding 0 to tally: 40..48
  40 -> 41 [label="B / B,L"];
  40 -> 40 [label="* / *,L"];
  41 -> 41 [label="B / B,L"];
  41 -> 42 [label="* / *,L"];
  42 -> 43 [label="B / B,L"];
  42 -> 42 [label="* / *,L"];
  43 -> 43 [label="y / y,L"];
  43 -> 43 [label="x / x,L"];
  43 -> 44 [label="0 / y,R"];
  43 -> 44 [label="1 / x,R"];
  43 -> 44 [label="B / y,R"];
  44 -> 45 [label="B / B,R"];
  44 -> 44 [label="* / *,R"];
  45 -> 45 [label="B / B,R"];
  45 -> 46 [label="* / *,R"];
  46 -> 47 [label="B / B,R"];
  46 -> 46 [label="* / *,R"];
  47 -> 47 [label="B / B,R"];
  47 -> 48 [label="* / *,R"];
  48 -> 32 [label="B / B,L"];
  48 -> 48 [label="* / *,R"];

  // Adding 1 to tally: 50..59
  50 -> 51 [label="B / B,L"];
  50 -> 50 [label="* / *,L"];
  51 -> 51 [label="B / B,L"];
  51 -> 52 [label="* / *,L"];
  52 -> 53 [label="B / B,L"];
  52 -> 52 [label="* / *,L"];
  53 -> 53 [label="y / y,L"];
  53 -> 53 [label="x / x,L"];
  53 -> 55 [label="B / x,R"];
  53 -> 55 [label="0 / x,R"];
  53 -> 54 [label="1 / y,L"];
  54 -> 55 [label="0 / 1,R"];
  54 -> 54 [label="1 / 0,L"];
  54 -> 55 [label="B / 1,R"];
  55 -> 56 [label="B / B,R"];
  55 -> 55 [label="* / *,R"];
  56 -> 56 [label="B / B,R"];
  56 -> 57 [label="* / *,R"];
  57 -> 58 [label="B / B,R"];
  57 -> 57 [label="* / *,R"];
  58 -> 58 [label="B / B,R"];
  58 -> 59 [label="* / *,R"];
  59 -> 32 [label="B / B,L"];
  59 -> 59 [label="* / *,R"];

  // Finished adding, clean up: 70..76
  70 -> 70 [label="x / 1,R"];
  70 -> 70 [label="y / 0,R"];
  70 -> 71 [label="B / B,L"];
  71 -> 72 [label="B / B,L"];
  71 -> 71 [label="* / *,L"];
  72 -> 72 [label="B / B,L"];
  72 -> 73 [label="* / *,L"];
  73 -> 74 [label="B / B,L"];
  73 -> 73 [label="* / *,L"];
  74 -> 74 [label="y / 0,L"];
  74 -> 74 [label="x / 1,L"];
  74 -> 75 [label="* / *,R"];
  75 -> 76 [label="B / B,R"];
  75 -> 75 [label="* / *,R"];
  76 -> 20 [label="B / B,R"];
  76 -> 76 [label="* / *,R"];

  // Finished multiplying, clean up: 80..82
  80 -> 80 [label="# / B,R"];
  80 -> 81 [label="B / B,R"];
  81 -> 82 [label="B / B,L"];
  81 -> 81 [label="* / B,R"];
  82 -> 82 [label="B / B,L"];
  // In the original snippet: 82 * * * halt
  // means: read '*', write '*', no move, HALT
  // We'll just show an edge to a "halt" node:
  node [shape=doublecircle];
  Halt [label="halt"];
  82 -> Halt [label="* / *,stay"];
}